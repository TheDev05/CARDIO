#include <bits/stdc++.h>
using namespace std;

int traverse(std::vector<std::vector<int>> &num, int count, int i, int j)
{
    if (num[i][j] == 2)
    {
        std::cout << count << '\n';
        if (count == 0)
            return 1;

        return 0;
    }

    if (num[i][j] == -1)
        return 0;

    int sum = 0;
    if (i > 0 && (num[i - 1][j] == 0 || num[i - 1][j] == 2))
    {
        int temp = num[i][j];
        num[i][j] = -1;

        sum += traverse(num, count - 1, i - 1, j);
        num[i][j] = temp;
    }

    if (i < num.size() - 1 && (num[i + 1][j] == 0 || num[i + 1][j] == 2))
    {
        int temp = num[i][j];
        num[i][j] = -1;

        sum += traverse(num, count - 1, i + 1, j);
        num[i][j] = temp;
    }

    if (j > 0 && (num[i][j - 1] == 0 || num[i][j - 1] == 2))
    {
        int temp = num[i][j];
        num[i][j] = -1;

        sum += traverse(num, count - 1, i, j - 1);
        num[i][j] = temp;
    }

    if (j < num[0].size() - 1 && (num[i][j + 1] == 0 || num[i][j + 1] == 2))
    {
        int temp = num[i][j];
        num[i][j] = -1;

        sum += traverse(num, count - 1, i, j + 1);
        num[i][j] = temp;
    }

    return sum;
}

int main()
{
    int n, m;
    std::cin >> n >> m;

    std::vector<std::vector<int>> num;
    for (int i = 0; i < n; i++)
    {
        std::vector<int> temp(m);
        for (int j = 0; j < m; j++)
        {
            std::cin >> temp[j];
        }

        num.push_back(temp);
    }

    bool ok = true;
    int count = 0, left = 0, right = 0;

    for (int i = 0; i < num.size(); i++)
    {
        for (int j = 0; j < num[0].size(); j++)
        {
            if (num[i][j] == 1 && ok)
            {
                left = i;
                right = j;

                ok = false;
            }

            if (num[i][j] == 0)
                count++;
        }
    }

    // for (auto i : num)
    // {
    //     for (auto j : i)
    //         std::cout << j << " ";
    //     std::cout << '\n';
    // }

    std::cout << traverse(num, 0, left, right);
}